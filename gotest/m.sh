#!/bin/bash

## Âà∞È°πÁõÆË∑üÁõÆÂΩïÊâßË°åËØ•ËÑöÊú¨
ST_COMMIT_MSG=".stCommitMsg"

COMMIT_MSG="commit-msg"
GIT_HOOKS=".git/hooks"
GIT_COMMIT_MSG="$GIT_HOOKS/$COMMIT_MSG"
FIRST_DO="0"
installGitRules() {
    whiteFile() {
        cat >>$ST_COMMIT_MSG <<EOF
<type>(<scope>) : <subject>
<body>
<footer>
EOF
    }

    pushd ~/
    if [ ! -f $ST_COMMIT_MSG ]; then
        echo "$ST_COMMIT_MSG file not exist"
        touch .stCommitMsg
        whiteFile
    else
        COPY_FILE="${ST_COMMIT_MSG}_backup"
        cp -P ~/$ST_COMMIT_MSG ~/$COPY_FILE
        : >$ST_COMMIT_MSG
        whiteFile
    fi
    popd


    writeCommitMsg() {
        cat >>.git/hooks/commit-msg <<EOF
#!/bin/bash
TIP_MESSAGE='
<type>(<scope>) : <subject>\n
<body>\n
<footer>\n
\n
#type Êú¨Ê¨°‰øÆÊîπÂäüËÉΩÁ±ªÂûã\n
    .feat :Êñ∞ÂäüËÉΩ\n
    .fix :‰øÆÂ§çbug\n
    .opt :‰ºòÂåñ(optimize) ÂõæÁâáÂéãÁº©, Êñá‰ª∂Âà†Èô§Á≠â\n
    .ci : ÁâàÊú¨Âè∑ÂçáÁ∫ß„ÄÅbranchConfig‰øÆÊîπ„ÄÅscrip/podinfo.rbÁ≠âÂèëÂ∏ÉÁõ∏ÂÖ≥‰øÆÊîπ\n
    .test :Â¢ûÂä†ÊµãËØï\n

    .refactor :Êüê‰∏™Â∑≤ÊúâÂäüËÉΩÈáçÊûÑ\n
    .docs :ÊñáÊ°£ÊîπÂèò\n
    .style :‰ª£Á†ÅÊ†ºÂºèÊîπÂèò\n
    .revert :Êí§ÈîÄ‰∏ä‰∏ÄÊ¨°ÁöÑ commit (revert ÂëΩ‰ª§Ëá™Âä®ÁîüÊàê)\n
\n
#scope :Áî®Êù•ËØ¥ÊòéÊ≠§Ê¨°‰øÆÊîπÁöÑÂΩ±ÂìçËåÉÂõ¥\n
    .all :Ë°®Á§∫ÂΩ±ÂìçÈù¢Â§ß ÔºåÂ¶Ç‰øÆÊîπ‰∫ÜÁΩëÁªúÊ°ÜÊû∂  ‰ºöÂØπÁúü‰∏™Á®ãÂ∫è‰∫ßÁîüÂΩ±Âìç\n
    .loation :Ë°®Á§∫ÂΩ±ÂìçÂ∞èÔºåÊüê‰∏™Â∞èÂ∞èÁöÑÂäüËÉΩ\n
    .module :Ë°®Á§∫‰ºöÂΩ±ÂìçÊüê‰∏™Ê®°Âùó Â¶ÇÁôªÂΩïÊ®°Âùó„ÄÅÈ¶ñÈ°µÊ®°Âùó „ÄÅÁî®Êà∑ÁÆ°ÁêÜÊ®°ÂùóÁ≠âÁ≠â\n
\n
#subject: Áî®Êù•ÁÆÄË¶Å‰ø°ÊÅØÊèèËø∞Êú¨Ê¨°ÊîπÂä®\n
\n
#body :ÂÖ∑‰ΩìÁöÑ‰øÆÊîπ‰ø°ÊÅØ Â∫îËØ•Â∞ΩÈáèËØ¶ÁªÜ\n
\n
#footer :Â§áÊ≥®:  ÊñáÊ°£ÈìæÊé•„ÄÅbug id„ÄÅËÆæËÆ°ÊñáÊ°£\n
'

MSG=\$(awk '{printf("%s",\$0)}' \$1)
if [[ \$MSG =~ ^(feat|fix|opt|ci|test|refactor|docs|style|revert)\(.*\):.*$ ]]; then
    echo -e " commit success!"
else
    echo -e \MSG
    echo -e " Error: the commit message is irregular "
    echo -e " Error: type must be one of feat|fix|opt|ci|test|refactor|docs|style|revert"
    echo -e ' eg: feat(ÁßüÊàø): ËØ¶ÊÉÖÈ°µÂ¢ûÂä†Êó†Â∞ΩÊµÅ'
    echo 'ËØ¶ÁªÜÊñáÊ°£üëáüëáüëá'
    echo -e \$TIP_MESSAGE
    exit 1
fi
EOF
    }

    if [ ! -d $GIT_HOOKS ]; then
        pushd .git
        mkdir hooks
        mkfile -n 0b hooks/commit-msg
        popd
        writeCommitMsg
    else
        if [ ! -f $GIT_COMMIT_MSG ]; then

            mkfile -n 0b $GIT_COMMIT_MSG
            writeCommitMsg
        else

            COPY_FILE="${COMMIT_MSG}_backup"
            cp -P $GIT_COMMIT_MSG $GIT_HOOKS/$COPY_FILE
            : >$GIT_COMMIT_MSG
            writeCommitMsg
        fi
    fi

    sudo chmod 777 $GIT_COMMIT_MSG
    if [ $FIRST_DO != '0' ]; then
        echo 'Configuration is successful! ÔøΩÔøΩüëèüëè '
        echo 'Restart Sourcetree then submit your changes!'
    fi
}

uninstallGitRules() {
    if [ ! -f $GIT_COMMIT_MSG ]; then
        echo "Don't have git commit message rules to remove!"
    else
        rm $GIT_COMMIT_MSG
        echo "remove git commit message rules success!"
    fi

    pushd ~/
    if [ ! -f $ST_COMMIT_MSG ]; then
        echo "$ST_COMMIT_MSG file not exist, Don't have git commit rules template to remove!"
    else
        rm $ST_COMMIT_MSG
        echo "remove git commit message rules template success!"
    fi
    popd

}

install() {
    installGitRules
    FIRST_DO="1"
    installGitRules
}

if [ $# == 0 ]; then
    install
    exit
fi
for i in "$*"; do

    if [ $i == "install" ]; then
        install
    elif [ $i == "uninstall" ]; then
        uninstallGitRules
    else
        install
    fi
done

